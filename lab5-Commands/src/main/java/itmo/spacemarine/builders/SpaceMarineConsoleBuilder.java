package itmo.spacemarine.builders;

import itmo.io.Scannable;
import itmo.spacemarine.*;
import itmo.utils.MyException;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Random;

/**
 * same as SpaceMarineBuilder but though console. So, we can communicate with uset by it
 */
public class SpaceMarineConsoleBuilder { // –±–∏–ª–¥–µ—Ä –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω —Å–¥–µ–ª–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
    private final SpaceMarine spaceMarine;

    public SpaceMarineConsoleBuilder() {
        spaceMarine = new SpaceMarine();
    }

    public SpaceMarine build(Scannable scannable) throws MyException {
        buildName(scannable);
        buildId();
        buildCreationDate();
        buildHealth(scannable);
        buildLoyal(scannable);
        buildCategory(scannable);
        buildMeleeWeapon(scannable);
        buildChapter(scannable);
        buildCoordinates(scannable);
        return spaceMarine;
    }

    public void buildName(Scannable scannable) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ä–∞–±–ª—è üëâüëà");
        String name = scannable.readLine(); //–∑–∞–±—Ä–∞–ª–∏ —Å—Ç–æ—Ä—á–∫—É –∏–∑ scannable, –∞ –æ–Ω –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
        try {
            spaceMarine.setName(name);
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è: " + e.getMessage());
            this.buildName(scannable);
        }
    }

    public void buildId() throws MyException {
        Random random = new Random();
        int id = -1;
        while (id <= 0)
            id = random.nextInt();
        spaceMarine.setId(id);
    }

    public void buildCreationDate() throws MyException {
        spaceMarine.setCreationDate(LocalDateTime.now()); // –ú—ã —Ö–æ—Ç–∏–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–Ω–¥–æ–º–Ω–æ, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. MyException –º—ã –Ω–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Ä—è–¥ –ª–∏ –≤—ã—Å–∫–æ—á–∏—Ç –æ—à–∏–±–∫–∞
    }

    public void buildHealth(Scannable scannable) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è");
        String health = scannable.readLine();
        try {
            spaceMarine.setHealth(Double.parseDouble(health));
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è: " + e.getMessage());
            this.buildHealth(scannable);
        }
    }

    public void buildLoyal(Scannable scannable) {
        System.out.println("–í—ã –ø—Ä–µ–¥–∞–Ω–Ω—ã–π?");
        String loyal = scannable.readLine();
        try {
            spaceMarine.setLoyal(Boolean.parseBoolean(loyal));
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å: " + e.getMessage());
            this.buildLoyal(scannable);
        }
    }

    public void buildCategory(Scannable scannable) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö: " + Arrays.toString(AstartesCategory.values()));
        String category = scannable.readLine();
        try {
            spaceMarine.setCategory(AstartesCategory.valueOf(category));
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" + e.getMessage());
            this.buildCategory(scannable);
        }
    }

    public void buildMeleeWeapon(Scannable scannable) {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –æ—Ä—É–∂–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö: " + Arrays.toString(MeleeWeapon.values()));
        String weapon = scannable.readLine();
        try {
            spaceMarine.setMeleeWeapon(MeleeWeapon.valueOf(weapon));
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ—Ä—É–∂–∏–µ" + e.getMessage());
            this.buildMeleeWeapon(scannable);
        }
    }

    public void buildChapter(Scannable scannable) throws MyException {
        Chapter chapter = new Chapter();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ");
        String name = scannable.readLine();
        if (name.equals("")) {
            spaceMarine.setChapter(null);
            return;
        }
        try {
            chapter.setName(name);
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è " + e.getMessage());
            this.buildChapter(scannable);
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ—Ä–∞–±–ª–µ–π");
        String marinesCount = scannable.readLine();
        if (marinesCount.equals("")) {
            chapter.setMarinesCount(null);
        } else {
            try {
                chapter.setMarinesCount(Long.parseLong(marinesCount));
            } catch (Exception e) {
                System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –∫–æ—Ä–∞–±–ª–µ–π " + e.getMessage());
                this.buildChapter(scannable);
            }
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –º–∏—Ä");
        String world = scannable.readLine();
        if (world.equals("")) {
            chapter.setWorld(null);
        } else {
            try {
                chapter.setWorld(world);
            } catch (Exception e) {
                System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –º–∏—Ä " + e.getMessage());
                this.buildChapter(scannable);
            }
        }
        spaceMarine.setChapter(chapter);
    }

    public void buildCoordinates(Scannable scannable) throws MyException {
        Coordinates coordinates = new Coordinates();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X");
        String xCoordinate = scannable.readLine();
        try {
            coordinates.setX(Long.parseLong(xCoordinate));
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X " + e.getMessage());
            this.buildCoordinates(scannable);
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y");
        String yCoordinate = scannable.readLine();
        try {
            coordinates.setY(Double.parseDouble(yCoordinate));
        } catch (Exception e) {
            System.out.println("–£–ø—Å, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y: " + e.getMessage());
            this.buildCoordinates(scannable);
        }

        spaceMarine.setCoordinates(coordinates);
    }

}
